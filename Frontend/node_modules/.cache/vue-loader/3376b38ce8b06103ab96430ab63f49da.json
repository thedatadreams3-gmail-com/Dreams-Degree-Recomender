{"remainingRequest":"C:\\Users\\Niks.DASNADAS\\Desktop\\Project work\\Dreams-Degree-Recomender\\Frontend\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\Users\\Niks.DASNADAS\\Desktop\\Project work\\Dreams-Degree-Recomender\\Frontend\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\Niks.DASNADAS\\Desktop\\Project work\\Dreams-Degree-Recomender\\Frontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Niks.DASNADAS\\Desktop\\Project work\\Dreams-Degree-Recomender\\Frontend\\src\\components\\Home.vue?vue&type=template&id=8dc7cce2&","dependencies":[{"path":"C:\\Users\\Niks.DASNADAS\\Desktop\\Project work\\Dreams-Degree-Recomender\\Frontend\\src\\components\\Home.vue","mtime":1610812399942},{"path":"C:\\Users\\Niks.DASNADAS\\Desktop\\Project work\\Dreams-Degree-Recomender\\Frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1610802478856},{"path":"C:\\Users\\Niks.DASNADAS\\Desktop\\Project work\\Dreams-Degree-Recomender\\Frontend\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1610802556058},{"path":"C:\\Users\\Niks.DASNADAS\\Desktop\\Project work\\Dreams-Degree-Recomender\\Frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1610802478856},{"path":"C:\\Users\\Niks.DASNADAS\\Desktop\\Project work\\Dreams-Degree-Recomender\\Frontend\\node_modules\\vue-loader\\lib\\index.js","mtime":1610802556058}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}